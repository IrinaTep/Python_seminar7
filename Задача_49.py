# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. 
# Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. 
# Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были были запущены на круговые орбиты. 
# Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. 
# Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. 
# Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. 
# При решении задачи используйте списочные выражения. 
# Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. 
# Гарантируется, что самая далекая планета ровно одна

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10


# # Теория
# # list comprehension / генераторное выражение / генератор списка / списковое включение, 
# vals = [1, 2, 3]
# #    что сделать с каким элементом при каком условии
# new = [item**2 for item in valss if item % 2 == 1]
# print(new)

# # то же самое через for
# new = []
# for item in vals:
#     if item % 2 == 1:
#         new.append(item**2)

import math

def find_farthest_orbit(list_of_orbits):
    max_area = max([math.pi * a * b for a, b in list_of_orbits if a != b])
    farthest_orbit = [(a, b) for a, b in list_of_orbits if a != b and math.pi * a * b == max_area]
    return farthest_orbit[0]

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

# Решение на семинаре
def find_farthest_orbit(list_of_orbits) -> tuple:
    temp_list = [(0 if item[0] == item[1] else item[0] * item[1]) for item in list_of_orbits]
    return list_of_orbits[temp_list.index(max(temp_list))]

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(find_farthest_orbit(orbits))
